AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template deploys trillo-data-service, a long running ECS service.

Parameters:
  #TODO: Add and use EnvironmentName
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  DockerImageTag:
    Description: Docker image Tag
    Type: String

  DefaultDataServerUsername:
    Description: DefaultDataServerUsername
    Type: String

  DefaultDataServerPassword:
    Description: DefaultDataServerPassword
    Type: String

  DefaultDataServerHost:
    Description: DefaultDataServerHost
    Type: String

Resources:

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: "trillo-data-service"
          ContainerPort: 8030
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: trillo-data-service
      Volumes:
        - Name: trillo-repo
          Host:
            SourcePath: "/mnt/efs/trillo-repo/"
      ContainerDefinitions:
        - Name: trillo-data-service
          Essential: true
          Image: !Sub trillo/trillo-data-service:${DockerImageTag}
          MemoryReservation: 1024
          Environment:
            - Name: DEFAULT_DATA_SERVER_TYPE
              Value: mysql
            - Name: DEFAULT_DATA_SERVER_HOST
              Value: !Ref DefaultDataServerHost
            - Name: DEFAULT_DATA_SERVER_PORT
              Value: 3306
            - Name: DEFAULT_DATA_SERVER_USERNAME
              Value: !Ref DefaultDataServerUsername
            - Name: DEFAULT_DATA_SERVER_PASSWORD
              Value: !Ref DefaultDataServerPassword
            - Name: TRILLO_USE_REDIS
              Value: "false"
          PortMappings:
            - ContainerPort: 8030
          MountPoints:
            - ContainerPath: "/trillo-repo"
              SourceVolume: trillo-repo
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 14

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      #Name: !Join [ "-", [ !Select [ 2, !Split ["/", !Ref Listener]], DS]]
      VpcId: !Ref VPC
      Port: 443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200-499
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: /ds
      HealthCheckProtocol: HTTPS
      #HealthCheckTimeoutSeconds: 5
      #HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 101
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward


  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": [ "ecs.amazonaws.com" ]},
              "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "elasticloadbalancing:DeregisterTargets",
                  "elasticloadbalancing:DescribeTargetGroups",
                  "elasticloadbalancing:DescribeTargetHealth",
                  "elasticloadbalancing:RegisterTargets"
                ],
                "Resource": "*"
              }]
            }
